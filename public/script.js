/* ------------
Mobile Nav Menu
------------ */

// displays/hides mobile menu when user clicks the burger menu icon/cross 
function showMobileMenu() {
    const mobilemenu = document.querySelector ('.mobilemenu') 
    mobilemenu.style.display = 'flex';
}

function hideMobileMenu() {
    const mobilemenu = document.querySelector ('.mobilemenu') 
    mobilemenu.style.display = 'none';
}

/* ----------------
Recipe Time Tracker
---------------- */
//Recipe Time Tracker uses Javascript sections generated by AI: [ChatGPT]. (2024 Jun 6). https://chat.openai.com The generated code made two functions: 1) to create/delete rows based on user input when using the newEntryButton or deleteEntryButton, and 2) to store user data in local storage. Additional JS has then been added to listen for user clicks of buttons + load and retrieve local storage data.

document.addEventListener('DOMContentLoaded', () => {
    //Reads local storage and adds it to the Time tracker table when web app loads/reloads
    loadEntries();

    document.querySelector('.addEntryButton').addEventListener('click', () => {
        //Adds a new entry row when user clicks the add recipe button
        addNewRow();
    });

    document.addEventListener('click', (event) => {
        //Removes an entry when user clicks the "x" button on any row, and saves the change to local storage
        if (event.target.classList.contains('deleteEntryButton')) {
            const row = event.target.closest('.entryRow');
            row.remove();
            updateEntries();
        }
    });
});

//AI generated Function: when add recipe button is clicked, this function selects the .userEntries HTML table body and creates a new row for the user to use. Once created, saves new row to local storage.
function addNewRow(date = '', recipe = 'Type in your recipe', time = '10') {
    const userEntries = document.querySelector('.userEntries');
    const newRow = document.createElement('tr');
    newRow.className = 'entryRow';
    //added data labels to innerHTML for responsiveness in mobile
    newRow.innerHTML = `
        <td data-label = "Date:">
            <input type="date" class="dateEntry" value="${date}">
        </td>
        <td data-label = "Recipe Made:">
            <input type="text" class="recipeEntry" value="${recipe}">
        </td>
        <td data-label = "Time Taken:">
            <input type="number" class="timeEntry" value="${time}">
            <span class="timeEntryMeasure">Minutes</span>
        </td>
        <td>
            <button type="button" class="deleteEntryButton">&times;</button>
        </td>
    `;
    userEntries.appendChild(newRow);
    updateEntries();
}

//AI generated function 'saveEntries': creates an array to read and store the user's inputted data of each row (date, recipe made, time taken), using setItem() to store it in local storage.
function updateEntries() {
    const entries = [];
    document.querySelectorAll('.entryRow').forEach(row => {
        const date = row.querySelector('.dateEntry').value;
        const recipe = row.querySelector('.recipeEntry').value;
        const time = row.querySelector('.timeEntry').value;
        entries.push({ date, recipe, time });
    });
    localStorage.setItem('timeTrackerEntry', JSON.stringify(entries));
}

function loadEntries() {
    //Retrieves value with the key 'timeTrackerEntries'
    let entries = localStorage.getItem('timeTrackerEntry');
    //checks values: if it exists, the JSON string is parsed to the entries array. If null, it will fallback and ensure the array is empty
    if (entries) {
        entries = JSON.parse(entries);
    } else {
        entries = [];
    }
    //Iterate over objects in entry, and passes the date, recipe made and time taken data to make a new row with the given data
    entries.forEach(entry => {
        addNewRow(entry.date, entry.recipe, entry.time);
    });
}


//listens for any user changes in any row: if the user changes a value in any of the rows they made, store the change in local storage
document.addEventListener('input', (event) => {
    if (event.target.classList.contains('dateEntry') || event.target.classList.contains('recipeEntry') || event.target.classList.contains('timeEntry')) {
        updateEntries();
    }
});